pipeline {
    agent any
    
    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'action', value: '$.action'],
                [key: 'number', value: '$.number'],
                [key: 'title', value: '$.pull_request.title'],
                [key: 'base_ref', value: '$.pull_request.base.ref'],
                [key: 'head_ref', value: '$.pull_request.head.ref']
            ],
            causeString: 'Triggered by GitHub PR #$number: $title',
            token: 'github-pr-webhook',
            printContributedVariables: true,
            printPostContent: true,
            regexpFilterText: '$action $base_ref',
            regexpFilterExpression: '^(opened|synchronize|reopened) main$'
        )
    }
    
    stages {
        stage('PR ready to main') {
            steps {
                script {
                    echo "PR ready to main - Starting Pipeline"
                    echo "PR Action: ${env.action ?: 'manual'}"
                    echo "PR Number: ${env.number ?: 'N/A'}"
                    echo "Base Branch: ${env.base_ref ?: 'main'}"
                    echo "Head Branch: ${env.head_ref ?: 'unknown'}"
                    
                    checkout scm
                    sh 'ls -la'
                    echo "Code checked out successfully"
                }
            }
        }
        
        stage('Check the secrets') {
            steps {
                script {
                    echo "Checking for secrets in repository..."
                    
                    def foundSecrets = false
                    
                    // Check for config.txt
                    if (fileExists('config.txt')) {
                        echo "Found config.txt - checking contents"
                        def content = readFile('config.txt')
                        echo "Content preview: ${content.take(100)}"
                        
                        if (content.toLowerCase().contains('key') || 
                            content.toLowerCase().contains('secret') || 
                            content.toLowerCase().contains('token') ||
                            content.toLowerCase().contains('password')) {
                            foundSecrets = true
                            echo "SECRETS DETECTED in config.txt"
                        }
                    }
                    
                    // Check for other secret files
                    def secretFiles = ['secrets.txt', '.env', 'credentials.json', 'api-keys.txt']
                    for (file in secretFiles) {
                        if (fileExists(file)) {
                            echo "Found potential secret file: ${file}"
                            foundSecrets = true
                        }
                    }
                    
                    // Simple grep for common secret patterns
                    def grepResult = sh(
                        script: "grep -r -i 'password\\|api.*key\\|secret\\|token\\|sk-\\|ghp_' . --exclude-dir=.git --exclude='Jenkinsfile*' --exclude='*.md' || true",
                        returnStdout: true
                    ).trim()
                    
                    if (grepResult) {
                        echo "POTENTIAL SECRETS FOUND:"
                        echo "${grepResult}"
                        foundSecrets = true
                    }
                    
                    if (foundSecrets) {
                        echo "SECRETS DETECTED - Pipeline will go to FOUND path"
                        env.SECRETS_STATUS = "found"
                    } else {
                        echo "NO SECRETS DETECTED - Pipeline will go to NOT FOUND path"
                        env.SECRETS_STATUS = "not_found"
                    }
                }
            }
        }
        
        stage('found') {
            when {
                expression { env.SECRETS_STATUS == "found" }
            }
            steps {
                echo "Path: FOUND - Secrets detected"
                echo "Moving to rejection stage..."
            }
        }
        
        stage('PR reject') {
            when {
                expression { env.SECRETS_STATUS == "found" }
            }
            steps {
                script {
                    echo "PR AUTOMATICALLY REJECTED"
                    echo "Reason: Secrets detected in repository"
                    echo "Action Required: Remove all secrets and push again"
                    echo "Details of secrets found above in 'Check the secrets' stage"
                    
                    // Create rejection report
                    writeFile(
                        file: 'SECURITY_REJECTION_REPORT.txt',
                        text: """
SECURITY SCAN REJECTION REPORT
=============================
Date: ${new Date()}
PR Number: ${env.number ?: 'N/A'}
Branch: ${env.head_ref ?: 'unknown'} -> ${env.base_ref ?: 'main'}

REASON: Secrets/sensitive data detected in repository

ACTION REQUIRED:
1. Remove all secrets from your code
2. Use environment variables for sensitive data
3. Use secure storage solutions (HashiCorp Vault, AWS Secrets Manager, etc.)
4. Commit the cleaned code
5. Push again to re-trigger the pipeline

This PR is automatically rejected for security reasons.
Contact your DevOps team if you need help with secret management.
                        """
                    )
                    
                    error("PR rejected due to secrets in code")
                }
            }
        }
        
        stage('Not found') {
            when {
                expression { env.SECRETS_STATUS == "not_found" }
            }
            steps {
                echo "Path: NOT FOUND - No secrets detected"
                echo "Security scan passed successfully"
                echo "Proceeding to manual review step..."
            }
        }
        
        stage('Review can approve the request and merge it') {
            when {
                expression { env.SECRETS_STATUS == "not_found" }
            }
            steps {
                script {
                    echo "MANUAL REVIEW REQUIRED"
                    echo "Security scan passed - no secrets detected"
                    echo "Requesting human approval for code review..."
                    
                    try {
                        timeout(time: 15, unit: 'MINUTES') {
                            def approval = input(
                                message: "PR Security Check Passed - Manual Review Required",
                                parameters: [
                                    choice(
                                        name: 'DECISION',
                                        choices: ['APPROVE', 'REJECT'],
                                        description: 'Review the code changes and make a decision'
                                    ),
                                    string(
                                        name: 'REVIEWER_COMMENTS',
                                        defaultValue: '',
                                        description: 'Optional review comments or concerns'
                                    )
                                ],
                                submitterParameter: 'REVIEWER',
                                ok: 'Submit Review'
                            )
                            
                            if (approval.DECISION == 'APPROVE') {
                                echo "PR APPROVED by ${approval.REVIEWER}"
                                echo "Review Comments: ${approval.REVIEWER_COMMENTS ?: 'No comments provided'}"
                                echo "PR is ready to merge!"
                                
                                // Create approval report
                                writeFile(
                                    file: 'APPROVAL_REPORT.txt',
                                    text: """
PR APPROVAL REPORT
=================
Date: ${new Date()}
PR Number: ${env.number ?: 'N/A'}
Branch: ${env.head_ref ?: 'unknown'} -> ${env.base_ref ?: 'main'}
Reviewer: ${approval.REVIEWER}
Decision: APPROVED
Comments: ${approval.REVIEWER_COMMENTS ?: 'No comments provided'}

Security Status: PASSED (No secrets detected)
Review Status: APPROVED
Ready to Merge: YES
                                    """
                                )
                                
                            } else {
                                echo "PR REJECTED by ${approval.REVIEWER}"
                                echo "Rejection Reason: ${approval.REVIEWER_COMMENTS ?: 'No reason provided'}"
                                
                                // Create rejection report
                                writeFile(
                                    file: 'REVIEW_REJECTION_REPORT.txt',
                                    text: """
PR REVIEW REJECTION REPORT
=========================
Date: ${new Date()}
PR Number: ${env.number ?: 'N/A'}
Branch: ${env.head_ref ?: 'unknown'} -> ${env.base_ref ?: 'main'}
Reviewer: ${approval.REVIEWER}
Decision: REJECTED
Reason: ${approval.REVIEWER_COMMENTS ?: 'No reason provided'}

Security Status: PASSED (No secrets detected)
Review Status: REJECTED
                                    """
                                )
                                
                                error("PR rejected by reviewer: ${approval.REVIEWER}")
                            }
                        }
                    } catch (Exception e) {
                        echo "Review timeout - no approval received within 15 minutes"
                        echo "Pipeline will fail due to lack of approval"
                        
                        writeFile(
                            file: 'TIMEOUT_REPORT.txt',
                            text: """
PR REVIEW TIMEOUT REPORT
=======================
Date: ${new Date()}
PR Number: ${env.number ?: 'N/A'}
Branch: ${env.head_ref ?: 'unknown'} -> ${env.base_ref ?: 'main'}

Security Status: PASSED (No secrets detected)
Review Status: TIMEOUT (No reviewer response within 15 minutes)

Action Required: Re-run pipeline and complete review within timeout period.
                            """
                        )
                        
                        error("No approval received within timeout period")
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "Pipeline Summary:"
                echo "=================="
                echo "PR Number: ${env.number ?: 'N/A'}"
                echo "Branch: ${env.head_ref ?: 'unknown'} -> ${env.base_ref ?: 'main'}"
                echo "Secrets Status: ${env.SECRETS_STATUS ?: 'unknown'}"
                echo "Build Result: ${currentBuild.result ?: 'IN_PROGRESS'}"
                
                // Archive any reports created
                archiveArtifacts artifacts: '*_REPORT.txt', allowEmptyArchive: true
            }
        }
        
        success {
            echo "Pipeline SUCCESS: PR approved and ready to merge"
            echo "All security checks passed and manual review completed"
        }
        
        failure {
            echo "Pipeline FAILED: PR blocked"
            script {
                if (env.SECRETS_STATUS == "found") {
                    echo "Failure Reason: Secrets detected in repository"
                } else {
                    echo "Failure Reason: Manual review rejected or timed out"
                }
            }
        }
        
        aborted {
            echo "Pipeline ABORTED: Build was cancelled"
        }
    }
}
