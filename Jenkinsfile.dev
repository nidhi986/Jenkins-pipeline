pipeline {
    agent any
    
    stages {
        stage('PR ready to main') {
            steps {
                echo "PR ready to main - Starting Pipeline"
                checkout scm
                sh 'ls -la'
                echo "Code checked out successfully"
            }
        }
        
        stage('Check the secrets') {
            steps {
                script {
                    echo "Checking for secrets in repository..."
                    
                    def foundSecrets = false
                    
                    // Check for config.txt
                    if (fileExists('config.txt')) {
                        echo "Found config.txt - checking contents"
                        def content = readFile('config.txt')
                        echo "Content preview: ${content.take(100)}"
                        
                        if (content.toLowerCase().contains('key') || 
                            content.toLowerCase().contains('secret') || 
                            content.toLowerCase().contains('token') ||
                            content.toLowerCase().contains('password')) {
                            foundSecrets = true
                            echo "SECRETS DETECTED in config.txt"
                        }
                    }
                    
                    // Simple grep for common secret patterns
                    def grepResult = sh(
                        script: "grep -r -i 'password\\|api.*key\\|secret\\|token' . --exclude-dir=.git --exclude='Jenkinsfile*' || true",
                        returnStdout: true
                    ).trim()
                    
                    if (grepResult) {
                        echo "POTENTIAL SECRETS FOUND:"
                        echo "${grepResult}"
                        foundSecrets = true
                    }
                    
                    if (foundSecrets) {
                        echo "SECRETS DETECTED - Pipeline will go to FOUND path"
                        env.SECRETS_STATUS = "found"
                    } else {
                        echo "NO SECRETS DETECTED - Pipeline will go to NOT FOUND path"
                        env.SECRETS_STATUS = "not_found"
                    }
                }
            }
        }
        
        stage('found') {
            when {
                expression { env.SECRETS_STATUS == "found" }
            }
            steps {
                echo "Path: FOUND - Secrets detected"
                // This leads to PR reject stage
            }
        }
        
        stage('PR reject') {
            when {
                expression { env.SECRETS_STATUS == "found" }
            }
            steps {
                echo "PR AUTOMATICALLY REJECTED"
                echo "Reason: Secrets detected in repository"
                echo "Action Required: Remove all secrets and push again"
                error("PR rejected due to secrets in code")
            }
        }
        
        stage('Not found') {
            when {
                expression { env.SECRETS_STATUS == "not_found" }
            }
            steps {
                echo "Path: NOT FOUND - No secrets detected"
                echo "Proceeding to review step..."
            }
        }
        
        stage('Review can approve the request and merge it') {
            when {
                expression { env.SECRETS_STATUS == "not_found" }
            }
            steps {
                script {
                    echo "MANUAL REVIEW REQUIRED"
                    echo "No secrets found - requesting human approval"
                    
                    try {
                        timeout(time: 10, unit: 'MINUTES') {
                            def approval = input(
                                message: 'No secrets detected. Approve this PR for merge?',
                                parameters: [
                                    choice(
                                        name: 'DECISION',
                                        choices: ['APPROVE', 'REJECT'],
                                        description: 'Review the code and decide'
                                    ),
                                    string(
                                        name: 'REVIEWER_COMMENTS',
                                        defaultValue: '',
                                        description: 'Optional review comments'
                                    )
                                ],
                                submitterParameter: 'REVIEWER'
                            )
                            
                            if (approval.DECISION == 'APPROVE') {
                                echo "PR APPROVED by ${approval.REVIEWER}"
                                echo "Comments: ${approval.REVIEWER_COMMENTS}"
                                echo "Ready to merge!"
                            } else {
                                echo "PR REJECTED by ${approval.REVIEWER}"
                                echo "Comments: ${approval.REVIEWER_COMMENTS}"
                                error("PR rejected by reviewer")
                            }
                        }
                    } catch (Exception e) {
                        echo "Review timeout - no approval received"
                        error("No approval received within timeout period")
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "Pipeline SUCCESS: PR approved and ready to merge"
        }
        failure {
            echo "Pipeline FAILED: PR blocked"
        }
    }
}
