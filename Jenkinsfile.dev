pipeline {
    agent any
    
    stages {
        stage('PR ready to main') {
            steps {
                echo "PR ready to main - Starting Pipeline"
                checkout scm
                sh 'ls -la'
                echo "Code checked out successfully"
            }
        }
        
        stage('Check the secrets') {
            steps {
                script {
                    echo "Checking for secrets in repository..."
                    
                    def foundSecrets = false
                    def secretDetails = []
                    
                    // Check for config.txt
                    if (fileExists('config.txt')) {
                        echo "Found config.txt - checking contents"
                        def content = readFile('config.txt')
                        echo "Content preview: ${content.take(100)}"
                        
                        if (content.toLowerCase().contains('key') || 
                            content.toLowerCase().contains('secret') || 
                            content.toLowerCase().contains('token') ||
                            content.toLowerCase().contains('password')) {
                            foundSecrets = true
                            secretDetails.add("config.txt contains sensitive data")
                            echo "SECRETS DETECTED in config.txt"
                        }
                    }
                    
                    // Check for other secret files
                    def secretFiles = ['secrets.txt', '.env', 'credentials.json', 'api-keys.txt']
                    for (file in secretFiles) {
                        if (fileExists(file)) {
                            echo "Found potential secret file: ${file}"
                            foundSecrets = true
                            secretDetails.add("Suspicious file: ${file}")
                        }
                    }
                    
                    // Simple grep for common secret patterns
                    def grepResult = sh(
                        script: "grep -r -i 'password\\|api.*key\\|secret\\|token\\|sk-\\|ghp_' . --exclude-dir=.git --exclude='Jenkinsfile*' --exclude='*.md' || true",
                        returnStdout: true
                    ).trim()
                    
                    if (grepResult) {
                        echo "POTENTIAL SECRETS FOUND:"
                        echo "${grepResult}"
                        foundSecrets = true
                        secretDetails.add("Pattern matches in code")
                    }
                    
                    if (foundSecrets) {
                        echo "SECRETS DETECTED - Pipeline will REJECT PR"
                        env.SECRETS_STATUS = "found"
                        env.SECRET_DETAILS = secretDetails.join(", ")
                    } else {
                        echo "NO SECRETS DETECTED - Pipeline will SUCCEED"
                        env.SECRETS_STATUS = "not_found"
                    }
                }
            }
        }
        
        stage('found') {
            when {
                expression { env.SECRETS_STATUS == "found" }
            }
            steps {
                echo "Path: FOUND - Secrets detected"
                echo "Moving to rejection stage..."
            }
        }
        
        stage('PR reject') {
            when {
                expression { env.SECRETS_STATUS == "found" }
            }
            steps {
                script {
                    echo "PR AUTOMATICALLY REJECTED"
                    echo "Reason: Secrets detected in repository"
                    echo "Details: ${env.SECRET_DETAILS}"
                    
                    // Set GitHub commit status to failure using simpler method
                    try {
                        githubNotify context: 'jenkins/security-scan',
                                    description: 'Security scan failed - secrets detected',
                                    status: 'FAILURE'
                        echo "GitHub PR status set to FAILURE"
                    } catch (Exception e) {
                        echo "Could not set GitHub status: ${e.message}"
                        // Fallback to old method
                        try {
                            step([
                                $class: 'GitHubCommitStatusSetter',
                                reposSource: [$class: 'ManuallyEnteredRepositorySource', url: 'https://github.com/nidhi986/Jenkins-pipeline'],
                                commitShaSource: [$class: 'ManuallyEnteredShaSource', sha: env.GIT_COMMIT],
                                contextSource: [$class: 'ManuallyEnteredCommitContextSource', context: 'jenkins/security-scan'],
                                statusResultSource: [$class: 'ConditionalStatusResultSource', results: [
                                    [$class: 'AnyBuildResult', message: 'Security scan failed - secrets detected', state: 'FAILURE']
                                ]]
                            ])
                            echo "GitHub PR status set to FAILURE (fallback method)"
                        } catch (Exception e2) {
                            echo "Both GitHub status methods failed: ${e2.message}"
                        }
                    }
                    
                    echo "PR rejected on GitHub but pipeline completes successfully"
                }
            }
        }
        
        stage('Not found') {
            when {
                expression { env.SECRETS_STATUS == "not_found" }
            }
            steps {
                script {
                    echo "Path: NOT FOUND - No secrets detected"
                    echo "Security scan passed successfully"
                    
                    // Set GitHub commit status to success using simpler method
                    try {
                        githubNotify context: 'jenkins/security-scan',
                                    description: 'Security scan passed - no secrets detected',
                                    status: 'SUCCESS'
                        echo "GitHub PR status set to SUCCESS"
                    } catch (Exception e) {
                        echo "Could not set GitHub status: ${e.message}"
                        // Fallback to old method
                        try {
                            step([
                                $class: 'GitHubCommitStatusSetter',
                                reposSource: [$class: 'ManuallyEnteredRepositorySource', url: 'https://github.com/nidhi986/Jenkins-pipeline'],
                                commitShaSource: [$class: 'ManuallyEnteredShaSource', sha: env.GIT_COMMIT],
                                contextSource: [$class: 'ManuallyEnteredCommitContextSource', context: 'jenkins/security-scan'],
                                statusResultSource: [$class: 'ConditionalStatusResultSource', results: [
                                    [$class: 'AnyBuildResult', message: 'Security scan passed - no secrets detected', state: 'SUCCESS']
                                ]]
                            ])
                            echo "GitHub PR status set to SUCCESS (fallback method)"
                        } catch (Exception e2) {
                            echo "Both GitHub status methods failed: ${e2.message}"
                        }
                    }
                    
                    echo "PR approved automatically - ready to merge"
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "Pipeline completed successfully"
                echo "Build: #${env.BUILD_NUMBER}"
                echo "Branch: ${env.GIT_BRANCH ?: 'unknown'}"
                echo "Git Commit: ${env.GIT_COMMIT ?: 'unknown'}"
                echo "Secrets Status: ${env.SECRETS_STATUS ?: 'unknown'}"
                
                if (env.SECRETS_STATUS == "found") {
                    echo "Result: PR blocked on GitHub due to secrets"
                    echo "Secret Details: ${env.SECRET_DETAILS}"
                } else {
                    echo "Result: PR approved on GitHub"
                }
            }
        }
        
        success {
            script {
                if (env.SECRETS_STATUS == "found") {
                    echo "Pipeline SUCCESS: Secrets detected and PR blocked on GitHub"
                } else {
                    echo "Pipeline SUCCESS: No secrets found, PR can be merged"
                }
            }
        }
    }
}
