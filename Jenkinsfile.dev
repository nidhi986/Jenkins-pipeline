pipeline {
    agent any
    
    stages {
        stage('PR Ready to Main') {
            steps {
                echo "üöÄ PR Ready to Main - Starting Pipeline"
                checkout scm
                sh 'ls -la'
                echo "‚úÖ Code checked out successfully"
            }
        }
        
        stage('Check the Secrets') {
            steps {
                script {
                    echo "üîç Checking for secrets in repository..."
                    
                    def foundSecrets = false
                    
                    // Check for config.txt (your test file)
                    if (fileExists('config.txt')) {
                        echo "Found config.txt - checking contents"
                        def content = readFile('config.txt')
                        echo "Content: ${content}"
                        
                        if (content.contains('key') || content.contains('secret') || content.contains('token')) {
                            foundSecrets = true
                            echo "üö® SECRETS FOUND in config.txt"
                        }
                    }
                    
                    // Simple grep for common secret patterns
                    def grepResult = sh(
                        script: "grep -r -i 'password\\|api.*key\\|secret\\|token' . --exclude-dir=.git --exclude='Jenkinsfile*' || true",
                        returnStdout: true
                    ).trim()
                    
                    if (grepResult) {
                        echo "üö® POTENTIAL SECRETS FOUND:"
                        echo "${grepResult}"
                        foundSecrets = true
                    }
                    
                    env.SECRETS_FOUND = foundSecrets.toString()
                    echo "Secrets check result: ${env.SECRETS_FOUND}"
                }
            }
        }
        
        stage('PR Reject') {
            when {
                expression { env.SECRETS_FOUND == 'true' }
            }
            steps {
                echo "‚ùå PR REJECTED - Secrets detected!"
                echo "üö® Please remove secrets before merging"
                error("Pipeline failed due to secrets in code")
            }
        }
        
        stage('Not Found - Request Approval') {
            when {
                expression { env.SECRETS_FOUND == 'false' }
            }
            steps {
                script {
                    echo "‚úÖ No secrets found - requesting approval"
                    
                    try {
                        timeout(time: 5, unit: 'MINUTES') {
                            def approval = input(
                                message: 'Review Required for Main Branch',
                                parameters: [
                                    choice(
                                        name: 'DECISION',
                                        choices: ['APPROVE', 'REJECT'],
                                        description: 'Approve or reject this PR'
                                    )
                                ],
                                submitterParameter: 'REVIEWER'
                            )
                            
                            if (approval.DECISION == 'APPROVE') {
                                echo "‚úÖ PR APPROVED by ${approval.REVIEWER}"
                                echo "üéâ Ready to merge!"
                            } else {
                                echo "‚ùå PR REJECTED by ${approval.REVIEWER}"
                                error("PR rejected by reviewer")
                            }
                        }
                    } catch (Exception e) {
                        echo "‚è∞ Approval timeout"
                        error("No approval received")
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "üéâ Pipeline completed successfully!"
        }
        failure {
            echo "‚ùå Pipeline failed!"
        }
    }
}
