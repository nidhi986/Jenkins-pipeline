pipeline {
    agent any
    triggers {
        githubPush()  // Triggers on push events
    }
    stages {
        stage('PR Ready to Main') {
            steps {
                echo "üöÄ PR Ready to Main - Starting Pipeline"
                checkout scm
                sh 'ls -la'
                echo "‚úÖ Code checked out successfully"
            }
        }
        
        stage('Check the Secrets') {
            steps {
                script {
                    echo "üîç Checking for secrets in repository..."
                    
                    def foundSecrets = false
                    
                    // Check for config.txt (your test file)
                    if (fileExists('config.txt')) {
                        echo "Found config.txt - checking contents"
                        def content = readFile('config.txt')
                        echo "Content preview: ${content.take(100)}"
                        
                        if (content.toLowerCase().contains('key') || 
                            content.toLowerCase().contains('secret') || 
                            content.toLowerCase().contains('token') ||
                            content.toLowerCase().contains('password')) {
                            foundSecrets = true
                            echo "üö® SECRETS DETECTED in config.txt"
                        }
                    }
                    
                    // Simple grep for common secret patterns
                    def grepResult = sh(
                        script: "grep -r -i 'password\\|api.*key\\|secret\\|token' . --exclude-dir=.git --exclude='Jenkinsfile*' || true",
                        returnStdout: true
                    ).trim()
                    
                    if (grepResult) {
                        echo "üö® POTENTIAL SECRETS FOUND:"
                        echo "${grepResult}"
                        foundSecrets = true
                    }
                    
                    if (foundSecrets) {
                        echo "‚ùå SECRETS DETECTED - Pipeline will REJECT"
                        env.SECRETS_STATUS = "found"
                    } else {
                        echo "‚úÖ NO SECRETS DETECTED - Pipeline will SUCCEED"
                        env.SECRETS_STATUS = "not_found"
                    }
                }
            }
        }
        
        stage('PR Reject') {
            when {
                expression { env.SECRETS_STATUS == "found" }
            }
            steps {
                echo "‚ùå PR AUTOMATICALLY REJECTED"
                echo "üö® Reason: Secrets detected in repository"
                echo "üîß Action Required: Remove all secrets and push again"
                error("PR rejected due to secrets in code")
            }
        }
        
        stage('Not Found - Auto Approve') {
            when {
                expression { env.SECRETS_STATUS == "not_found" }
            }
            steps {
                echo "‚úÖ NO SECRETS FOUND"
                echo "üéâ PR AUTOMATICALLY APPROVED"
                echo "‚úÖ Ready to merge - no manual approval needed"
                echo "üöÄ Pipeline completed successfully"
            }
        }
    }
    
    post {
        success {
            echo "üéâ Pipeline SUCCESS: PR can be merged safely"
        }
        failure {
            echo "‚ùå Pipeline FAILED: PR blocked due to security issues"
        }
    }
}
